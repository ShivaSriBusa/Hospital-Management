#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlite3.h>
#define size 10

struct patient
{
    char phoneNo[size], emergencyNo[size];
    char date_Adm[20], time_Adm[20], patient_identity[100], date_release[20],time_release[20];
    char *name, *doc_name, *address, *symp, *medication, *allergies,*status;
}p1;

struct patient_advise
{
   char *precaution, *diet_advise, *prescription;
}a1;

struct visitor
{
    char phoneNo[size];
    char *name,*address;
}v1;

int readPatient()
{
    char buffer[1024];
    char *record, *line;
    int i = 0, j = 0;
    FILE *fstream = fopen("Patient_Record.txt", "r");
    if (fstream == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((line = fgets(buffer, sizeof(buffer), fstream)) != NULL)
    {
        record = strtok(line, ";");
        while (record != NULL)
        {
            printf("%s", record);
            record = strtok(NULL, ";");
        }
    }
    return 0;
}

void Advise(char *pname,char *ph)
{
    int s=100;
    FILE *fptr;
    a1.diet_advise = (char *)malloc(s);
    a1.precaution = (char *)malloc(s);
    a1.prescription =(char *)malloc(s);
    fptr = fopen("patient_advise.txt", "a");
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
    else
    {
        printf("\nDiet advise for Patient %s",pname);
        fgetc(stdin);
        printf("\nPlease input precaution: ");
        getline(&a1.precaution, &s, stdin);
        printf("\nPlease input prescription: ");
        getline(&a1.prescription, &s, stdin);
        printf("\nPlease input diet advise: ");
        getline(&a1.diet_advise, &s, stdin);
        fputs("Patient name: ", fptr);
        fputs(pname, fptr);
        fputs("Patient phone number: ", fptr);
        fputs(ph, fptr);
        fputs("\nPrecaution: ", fptr);
        fputs(a1.precaution, fptr);
        fputs("Prescription: ", fptr);
        fputs(a1.prescription, fptr);
        fputs("Diet advise: ", fptr);
        fputs(a1.diet_advise, fptr);
        fputs("\n",fptr);
        fclose(fptr);
    }
}

int Search_in_File(char *fname, char *str, char*ph) {
	FILE *fp;
	int linectr = 0,line_num=1,ret;
	int find_result = 0;
	char temp[512],inp;
	int a=0,b=0;
	char*record,*tmp;
	char newln[]="Patient discharged: yes",string[256];

	if((fp = fopen(fname, "r")) == NULL) {
	return(-1);}

	while(fgets(temp, 512, fp) != NULL) {
            record = temp;
		if((strstr(temp, str)) != NULL || a!=0)
            {
                if(strstr(temp,ph)!=NULL || a!=0)
                {
			//printf("A match found on line: %d\n", line_num);
			printf("%s", temp);


    a++;
    if(a==12)
        break;
    //printf("%d",a);

			find_result++;

                }
            }

		line_num++;
	}
    while(*record!='\0')
    {
        b++;
        if(b>20)
        {
            tmp=record;
            if(*tmp=='N')
            {
                *record++;
                tmp=record;
                if(*tmp=='o')
                {
                    printf("\n Do you want to discharge now? (Y/N) :");
                    scanf("%c",&inp);
                    if(inp=='N')
                    Advise(str,ph);
                    else
                    {
                        FILE *fstream,*fptr2,*fptr1;
                        fstream = fopen("discharged_list.txt", "a");
                        fputs("Patient name: ",fstream);
                        fputs(str,fstream);
                        printf("\nPlease input date of release (DD-MM-YYYY) : ");
                        scanf("%s",p1.date_release);
                        printf("\nPlease input time of release (HH:MM): ");
                        scanf("%s",p1.time_release);
                        fputs("Date of release: ",fstream);
                        fputs(p1.date_release,fstream);
                        fputs("\nTime of release: ",fstream);
                        fputs(p1.time_release,fstream);
                        fputs("\n\n",fstream);
                        fclose(fstream);
                        fptr1=fopen("patient_record.txt","r");
                        if (!fptr1)
                        {
                            printf("Unable to open the input file!!\n");
                            return 0;
                        }
                        fptr2=fopen("temp.txt","w");
                        if (!fptr2)
                        {
                            printf("Unable to open a temporary file to write!!\n");
                            fclose(fptr1);
                            return 0;
                        }
                // copy all contents to the temporary file other except specific line
                        while (!feof(fptr1))
                        {
                            strcpy(str, "\0");
                            fgets(string, 256, fptr1);
                            if (!feof(fptr1))
                            {
                                linectr++;
                                if (linectr != a)
                                {
                                    fprintf(fptr2, "%s", string);
                                }
                                else
                                {
                                    fprintf(fptr2, "%s\n", newln);
                                }
                            }
                        }
                        fclose(fptr1);
                        fclose(fptr2);
                        remove("patient_record.txt");
                        ret=rename("temp.txt","patient_record.txt");
                        if(ret == 0)
                        {
                            printf("File renamed successfully");
                        }
                        else
                        {
                            printf("Error: unable to rename the file");
                        }

                    }
                }
            }
        }
        *record++;
    }

	if(find_result == 0)
        {
		printf("\nSorry, couldn't find a match.\n");
        }

	//Close the file if still open.
	if(fp)
    {
		fclose(fp);
	}
   	return(0);
}

int general_rooms()
{
    int a = 0;
    char *line, buffer[1024], ch;
    FILE *fptr;
    fptr = fopen("general_rooms.txt", "r");
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
    for (ch = getc(fptr); ch != EOF; ch = getc(fptr))
        if (ch == '\n') // Increment count if this character is newline
            a = a + 1;
    if (a > 10)
    {
        printf("No Rooms available in general ward");
        fclose(fptr);
        return 0;
    }
    else
    {
        printf("Patient can be Admitted in general ward");
        fclose(fptr);
        return 1;
    }
}
int special_rooms()
{
    int a = 1;
    char *line, buffer[1024], ch;
    FILE *fptr;
    fptr = fopen("special_rooms.txt", "r");
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
   for (ch = getc(fptr); ch != EOF; ch = getc(fptr))
        if (ch == '\n') // Increment count if this character is newline
            a = a + 1;
    if (a > 10)
    {
        printf("No Rooms available in special ward");
        fclose(fptr);
        return 0;
    }
    else
    {
        printf("Patient can be Admitted in special ward");
        fclose(fptr);
        return 1;
    }
}
void disease(char *symptom, char *patient_name,char*ph)
{
    int viral = -1, k, flag = 1;
    FILE *fptr;
    char *chronic[] = {"cough", "cold", "fever", "sneezing"};
    char *physical[] = {"fracture", "sprain", "ligament", "tear"};
    char *token;
    char *symp[10];
    token = strtok(symptom, ",");
    symp[0] = token;
    while (token != NULL)
    {
        token = strtok(NULL, ",");
        symp[flag] = token;
        flag++;
    }
    for (int j = 0; j < 4; j++)
    {
        for (int i = 0; i < flag - 1; i++)
        {
            if (strcmp(symp[i], chronic[j]) == 0)
            {
                viral+=2;
            }
            else if (strcmp(symp[i], physical[j]) == 0)
            {
                viral+=1;
            }
        }
    }
    if (viral % 2 == 1)
    {
        k = special_rooms();
        if (k == 1)
        {
            fptr = fopen("special_rooms.txt", "a");
            fputs("Patient name: ",fptr);
            fputs(patient_name, fptr);
            fputs("Patient number: ",fptr);
            fputs(ph,fptr);
            fputs("\n", fptr);
            fclose(fptr);
        }
    }
    else if (viral % 2 == 0)
    {
        k = general_rooms();
        if (k == 1)
        {
            fptr = fopen("general_rooms.txt", "a");
            fputs("Patient name: ",fptr);
            fputs(patient_name, fptr);
            fputs("Patient number: ",fptr);
            fputs(ph,fptr);
            fputs("\n", fptr);
            fclose(fptr);
        }
    }
    else
    {
        printf("No admission Required");
    }
}

void display_advise(char *name, char *ph)
{
    FILE *fp;
    int line_num=1;
	int find_result = 0;
	char *temp;
	char buffer[1024];
	int a=0;
	//char*record;
	printf("\n");
    fp = fopen("Patient_advise.txt", "r");
    if (fp == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((temp = fgets(buffer, sizeof(buffer), fp)) != NULL)
	{
		if((strstr(temp,name)) != NULL || a!=0)
            {
                if(strstr(temp,ph)!=NULL || a!=0)
                {
			//printf("A match found on line: %d\n", line_num);
			printf("%s\n", temp);
    a++;
    if(a==12)
        break;
    //printf("%d",a);

			find_result++;

                }
            }
		line_num++;
	}
}

void display_single_visitor(char *name, char *ph)
{
    FILE *fp;
	char *temp;
	char buffer[1024];
	int a=0;
	//char*record;
	printf("\n");
    fp = fopen("visitor_info.txt", "r");
    if (fp == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((temp = fgets(buffer, sizeof(buffer), fp)) != NULL)
	{
		if((strstr(temp,name)) != NULL || a!=0)
            {
                if(strstr(temp,ph)!=NULL || a!=0)
                {
                    printf("%s", temp);
                    a++;
                    if(a==12)
                    break;
                }
            }
	}
}

void display_single_patient(char *name, char *ph)
{
    FILE *fp;
    int line_num=1;
	int find_result = 0;
	char *temp;
	char buffer[1024];
	int a=0;
	//char*record;
	printf("\n");
    fp = fopen("patient_record.txt", "r");
    if (fp == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((temp = fgets(buffer, sizeof(buffer), fp)) != NULL)
	{
		if((strstr(temp,name)) != NULL || a!=0)
            {
                if(strstr(temp,ph)!=NULL || a!=0)
                {
                    printf("%s\n", temp);
                    a++;
                    if(a==12)
                    break;
                }
            }
	}
}

int count_visitor()
{
    char buffer[1024];
    char *record, *line;
    int i = 0,count=0;
    FILE *fptr;
    fptr = fopen("visitor_info.txt", "r");
    if (fptr == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((line = fgets(buffer, sizeof(buffer), fptr)) != NULL)
    {
        record = strtok(line, ";");
        while (record != NULL)
        {
            if(strstr(record,"name"))
                i++;
            record = strtok(NULL, ";");
        }
    }
    fclose(fptr);
    count=i;
    return count;
}

int count_admit()
{
    char buffer[1024];
    char *record, *line;
    int i = 0, j = 0,count=0;;
    FILE *fptr1, *fptr2;
    fptr1 = fopen("general_rooms.txt", "r");
    fptr2 = fopen("special_rooms.txt", "r");
    if (fptr1 == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    if (fptr2 == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((line = fgets(buffer, sizeof(buffer), fptr1)) != NULL)
    {
        record = strtok(line, ";");
        while (record != NULL)
        {
            if(strstr(record,"name"))
                i++;
            record = strtok(NULL, ";");
        }
    }
    fclose(fptr1);
    while ((line = fgets(buffer, sizeof(buffer), fptr2)) != NULL)
    {
        record = strtok(line, ";");
        while (record != NULL)
        {
            if(strstr(record,"name"))
                j++;
            record = strtok(NULL, ";");
        }
    }
    fclose(fptr2);
    count=i+j;
    return count;
}

int visitor_info(char *name,char *ph)
{
    char buffer[1024];
    char *record, *line;
    int i = 0, j = 0,s=50;
    FILE *fptr1, *fptr2, *fptr3;
    fptr1 = fopen("general_rooms.txt", "r");
    fptr2 = fopen("special_rooms.txt", "r");
    fptr3 = fopen("visitor_info.txt", "a");
    if (fptr1 == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    if (fptr2 == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((line = fgets(buffer, sizeof(buffer), fptr1)) != NULL)
    {
            if(strstr(line,name))
                {
                    if(strstr(line,ph)&& i<1)
                    {
                    printf("\nPlease input visitor name: ");
                    getline(&v1.name, &s, stdin);
                    printf("\nPlease input visitor address: ");
                    getline(&v1.address, &s, stdin);
                    printf("\nPlease input visitor number: ");
                    scanf("%s",v1.phoneNo);
                    fputs("Visitor information for patient ",fptr3);
                    fputs(name,fptr3);
                    fputs("\nVisitor name: ",fptr3);
                    fputs(v1.name,fptr3);
                    fputs("\nVisitor address: ",fptr3);
                    fputs(v1.address,fptr3);
                    fputs("\nVisitor phone number: ",fptr3);
                    fputs(v1.phoneNo,fptr3);
                    i++;
                    }
                }
    }
    fclose(fptr1);
    while ((line = fgets(buffer, sizeof(buffer), fptr2)) != NULL)
    {
            if(strstr(line,name))
            {
                if(strstr(line,ph) && j<1)
                {
                    printf("\nPlease input visitor name: ");
                    getline(&v1.name, &s, stdin);
                    printf("\nPlease input visitor address: ");
                    getline(&v1.address, &s, stdin);
                    printf("\nPlease input visitor number: ");
                    scanf("%s",v1.phoneNo);
                    fputs("Visitor name: ",fptr3);
                    fputs(v1.name,fptr3);
                    fputs("\nVisitor address",fptr3);
                    fputs(v1.address,fptr3);
                    fputs("\nVisitor phone number: ",fptr3);
                    fputs(v1.phoneNo,fptr3);
                    fgetc(stdin);
                    j++;
                }

            }

    }
     fclose(fptr2);
    fclose(fptr3);
    if(i==0 && j==0)
        return 1;
    else return 0;


}

void add_patient()
{

    int s = 50;
    p1.address = (char *)malloc(s);
    p1.symp = (char *)malloc(s);
    p1.doc_name = (char *)malloc(s);
    p1.name = (char *)malloc(s);
    p1.medication = (char *)malloc(s);
    p1.allergies = (char *)malloc(s);
    // creating file pointer to work with files
    FILE *fptr;
    // opening file in writing mode
    fptr = fopen("Patient_record.txt", "a");
    // exiting program
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
    else
    {
        printf("Please input patient name:");
        getline(&p1.name, &s, stdin);
        printf("Please input patient address:");
        getline(&p1.address, &s, stdin);
        printf("Please input patient contact number:");
        scanf("%s", p1.phoneNo);
        printf("Please input patient emergency contact number:");
        scanf("%s", p1.emergencyNo);
        printf("Please input patient date of admission (DD-MM-YYYY):");
        scanf("%s", p1.date_Adm);
        printf("Please input patient time of admission (HH:MM) :");
        scanf("%s", p1.time_Adm);
        fgetc(stdin);
        printf("Please input patient symptoms:");
        getline(&p1.symp, &s, stdin);
        printf("Please input doctors attending :");
        getline(&p1.doc_name, &s, stdin);
        printf("Please input Patient identity number :");
        scanf("%s", p1.patient_identity);
        fgetc(stdin);
        printf("Please input patient medications:");
        getline(&p1.medication, &s, stdin);
        printf("Please input patient allergies:");
        getline(&p1.allergies, &s, stdin);
        fputs("Patient name: ", fptr);
        fputs(p1.name, fptr);
        fputs("Patient address: ", fptr);
        fputs(p1.address, fptr);
        fputs("Patient phone number: ", fptr);
        fputs(p1.phoneNo, fptr);
        fputs("\n", fptr);
        fputs("Patient emergency number: ", fptr);
        fputs(p1.emergencyNo, fptr);
        fputs("\n", fptr);
        fputs("Patient date of admission: ", fptr);
        fputs(p1.date_Adm, fptr);
        fputs("\n", fptr);
        fputs("Patient time of admission: ", fptr);
        fputs(p1.time_Adm, fptr);
        fputs("\n", fptr);
        fputs("Patient symptoms: ", fptr);
        fputs(p1.symp, fptr);
        fputs("Patient doctor name: ", fptr);
        fputs(p1.doc_name, fptr);
        fputs("Patient Identity: ", fptr);
        fputs(p1.patient_identity, fptr);
        fputs("\n", fptr);
        fputs("Patient medication: ", fptr);
        fputs(p1.medication, fptr);
        fputs("Patient allergies: ", fptr);
        fputs(p1.allergies, fptr);
        fputs("Patient discharged: ", fptr);
        fputs("No", fptr);
        p1.status="No";
        fputs("\n", fptr);
        disease(p1.symp,p1.name,p1.phoneNo);
        //printf("hello");
    }
    fclose(fptr);
}
void welcomeMessage()
{
    printf("\n\n\n\n\n");
    printf("\n\t\t\t  **-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**\n");
    printf("\n\t\t\t        =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
    printf("\n\t\t\t        =                 WELCOME                   =");
    printf("\n\t\t\t        =                   TO                      =");
    printf("\n\t\t\t        =                HOSPITAL                   =");
    printf("\n\t\t\t        =               MANAGEMENT                  =");
    printf("\n\t\t\t        =                 SYSTEM                    =");
    printf("\n\t\t\t        =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
    printf("\n\t\t\t  **-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**\n");
    printf("\n\n\n\t\t\t ");
    system("read -p 'Press Enter to continue...' var");
}

int main()
{
    int inp,s=100,c=0;
    welcomeMessage();
    system("clear");
    printf("\nPlease select one of the following:");
    printf("\n1. Add Patient Information");
    printf("\n2. Display all Patient Information");
    printf("\n3. Display prescription, precaution and diet advise");
    printf("\n4. Display information on Patient Admitted");
    printf("\n5. Update admitted Patients Record");
    printf("\n6. Add Visitor Information");
    printf("\n7. Display Visitor Information");
    printf("\nInput choice: ");
    scanf("%d", &inp);
    fgetc(stdin);
    switch (inp)
    {
    case 1:
        add_patient();
        break;
    case 2:
        readPatient();
        break;
    case 3:
        printf("\nPlease input patient name: ");
        getline(&p1.name, &s, stdin);
        printf("\nPlease input patient phone number: ");
        scanf("%s",p1.phoneNo);
        fgetc(stdin);
        display_advise(p1.name,p1.phoneNo);
        break;
    case 4:
        printf("\n1. Display a Patient Information");
        printf("\n2. Display total number of Patients Admitted");
        printf("\nInput choice: ");
        scanf("%d", &inp);
        fgetc(stdin);
        if(inp==1)
        {
            printf("\nPlease input patient name: ");
            getline(&p1.name, &s, stdin);
            printf("\nPlease input patient phone number: ");
            scanf("%s",p1.phoneNo);
            fgetc(stdin);
            display_single_patient(p1.name,p1.phoneNo);
        }
        else if(inp==2)
        {
            c=count_admit();
            printf("\nTotal number of admitted patients = %d",c);
        }
        break;

    case 5:
        //updateRecord();
        printf("\nPlease input patient name: ");
        getline(&p1.name, &s, stdin);
        printf("\nPlease input patient phone number: ");
        scanf("%s",p1.phoneNo);
        fgetc(stdin);
        Search_in_File("patient_record.txt",p1.name,p1.phoneNo);
        break;

    case 6:
        printf("\nPlease input patient name: ");
        getline(&p1.name, &s, stdin);
        printf("\nPlease input patient phone number: ");
        scanf("%s",p1.phoneNo);
        fgetc(stdin);
        c=visitor_info(p1.name,p1.phoneNo);
        if(c==1)
        printf("\nPatient has been discharged/Not admitted");
        break;

    case 7:
        printf("\n1. Display a visitor Information");
        printf("\n2. Display total number of visitors Admitted");
        printf("\nInput choice: ");
        scanf("%d", &inp);
        fgetc(stdin);
        if(inp==1)
        {
            printf("\nPlease input patient name: ");
            getline(&p1.name, &s, stdin);
            printf("\nPlease input patient phone number: ");
            scanf("%s",p1.phoneNo);
            fgetc(stdin);
            display_single_visitor(p1.name,p1.phoneNo);
        }
        else if(inp==2)
        {
            c=count_visitor();
            printf("\nTotal number of visitors = %d",c);
        }
        break;

    default:
        printf("Invalid choice");
        break;
    }
    return 0;
}
