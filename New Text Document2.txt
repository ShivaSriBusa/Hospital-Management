#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sqlite3.h>
#define size 10

int readPatient()
{
    char buffer[1024];
    char *record, *line;
    int i = 0, j = 0;
    FILE *fstream = fopen("Patient_Record.txt", "r");
    if (fstream == NULL)
    {
        printf("\n file opening failed ");
        return -1;
    }
    while ((line = fgets(buffer, sizeof(buffer), fstream)) != NULL)
    {
        record = strtok(line, ";");
        while (record != NULL)
        {
            printf("%s", record);
            record = strtok(NULL, ";");
        }
    }
    return 0;
}

void updateRecord() //second feature
{
    char buffer[100];
    char *ptr = NULL, *line, *record;
    int i = 0, j = 0;
    // creating file pointer to work with files
    FILE *fptr;

    // opening file in writing mode
    fptr = fopen("patient_record.txt", "r");
    /* read in every line of text, one name or several per line, doesn't matter*/
    while ((fgets(buffer, sizeof(buffer), fptr)) != NULL)
    {

        ptr = strstr(buffer, "abc"); //is the name in the buffer?
        if (ptr)
        {
            record = strtok(line, ";");
            while (record != NULL)
            {
            printf("%s", record);
            record = strtok(NULL, ";");
            }
        }
    }
    fclose(fptr);
}

int general_rooms()
{
    int a = 0;
    char *line, buffer[1024], ch;
    FILE *fptr;
    fptr = fopen("general_rooms.txt", "r");
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
    while ((ch = fgetc(fptr)) != EOF)
    {
        if (ch == '\n')
        {
            a++;
        }
    }
    if (a == 10)
    {
        printf("No Rooms available in general ward");
        fclose(fptr);
        return 0;
    }
    else
    {
        printf("Patient can be Admitted in general ward");
        fclose(fptr);
        return 1;
    }
}
int special_rooms()
{
    int a = 0;
    char *line, buffer[1024], ch;
    FILE *fptr;
    fptr = fopen("special_rooms.txt", "r");
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
    while ((ch = fgetc(fptr)) != EOF)
    {
        if (ch == '\n')
        {
            a++;
        }
    }
    if (a == 10)
    {
        printf("No Rooms available in special ward");
        fclose(fptr);
        return 0;
    }
    else
    {
        printf("Patient can be Admitted in special ward");
        fclose(fptr);
        return 1;
    }
}
void disease(char *symptom, char *patient_name)
{
    //printf("\n\n %s",symptom);
    int viral = -1, k, flag = 1;
    FILE *fptr;
    char *chronic[] = {"cough", "cold", "fever", "sneezing"};
    char *physical[] = {"fracture", "sprain", "ligament", "tear"};
    char *token;
    char *symp[10];
    token = strtok(symptom, ",");
    symp[0] = token;
    while (token != NULL)
    {
        // printf("%s\n", token);
        token = strtok(NULL, ",");
        symp[flag] = token;
        flag++;
    }
    //printf("%s",symp[0]);
    for (int j = 0; j < 4; j++)
    {
        for (int i = 0; i < flag - 1; i++)
        {
            if (strcmp(symp[i], chronic[j]) == 0)
            {
                //printf("chronic %d\n", j);
                viral+=2;
            }
            else if (strcmp(symp[i], physical[j]) == 0)
            {
                //printf("physcial %d\n", j);
                viral+=1;
            }
        }
    }
    if (viral % 2 == 1)
    {
        k = special_rooms();
        if (k == 1)
        {
            fptr = fopen("special_rooms.txt", "a");
            fputs(patient_name, fptr);
            fputs("\n", fptr);
            fclose(fptr);
        }
    }
    else if (viral % 2 == 0)
    {
        k = general_rooms();
        if (k == 1)
        {
            fptr = fopen("general_rooms.txt", "a");
            fputs(patient_name, fptr);
            fputs("\n", fptr);
            fclose(fptr);
        }
    }
    else
    {
        printf("No admission Required");
    }
}
void add_patient()
{
    char phoneNo[size], emergencyNo[size];
    char date_Adm[20], time_Adm[20], patient_identity[100];
    char *name, *doc_name, *address, *symp, *medication, *allergies;
    int s = 50;
    address = (char *)malloc(s);
    symp = (char *)malloc(s);
    doc_name = (char *)malloc(s);
    name = (char *)malloc(s);
    medication = (char *)malloc(s);
    allergies = (char *)malloc(s);
    // creating file pointer to work with files
    FILE *fptr;
    // opening file in writing mode
    fptr = fopen("Patient_record.txt", "a");
    // exiting program
    if (fptr == NULL)
    {
        printf("Error!");
        exit(1);
    }
    else
    {
        printf("Please input patient name:");
        getline(&name, &s, stdin);
        printf("Please input patient address:");
        getline(&address, &s, stdin);
        printf("Please input patient contact number:");
        scanf("%s", phoneNo);
        printf("Please input patient emergency contact number:");
        scanf("%s", emergencyNo);
        printf("Please input patient date of admission (dd-mm-yyyy):");
        scanf("%s", date_Adm);
        printf("Please input patient time of admission (xx:yy):");
        scanf("%s", time_Adm);
        fgetc(stdin);
        printf("Please input patient symptoms:");
        getline(&symp, &s, stdin);
        printf("Please input doctors attending :");
        getline(&doc_name, &s, stdin);
        printf("Please input Patient identity number :");
        scanf("%s", patient_identity);
        fgetc(stdin);
        printf("Please input patient medications:");
        getline(&medication, &s, stdin);
        printf("Please input patient allergies:");
        getline(&allergies, &s, stdin);
        fputs("Patient name: ", fptr);
        fputs(name, fptr);
        fputs("Patient address: ", fptr);
        fputs(address, fptr);
        fputs("Patient phone number: ", fptr);
        fputs(phoneNo, fptr);
        fputs("\n", fptr);
        fputs("Patient emergency number: ", fptr);
        fputs(emergencyNo, fptr);
        fputs("\n", fptr);
        fputs("Patient date of admission: ", fptr);
        fputs(date_Adm, fptr);
        fputs("\n", fptr);
        fputs("Patient time of admission: ", fptr);
        fputs(time_Adm, fptr);
        fputs("\n", fptr);
        fputs("Patient symptoms: ", fptr);
        fputs(symp, fptr);
        fputs("Patient doctor name: ", fptr);
        fputs(doc_name, fptr);
        fputs("Patient Identity: ", fptr);
        fputs(patient_identity, fptr);
        fputs("\n", fptr);
        fputs("Patient medication: ", fptr);
        fputs(medication, fptr);
        fputs("Patient allergies: ", fptr);
        fputs(allergies, fptr);
        fputs("Patient discharged: ", fptr);
        fputs("No", fptr);
        fputs("\n\n", fptr);
        disease(symp, name);
        //printf("hello");
    }
    fclose(fptr);
}
void welcomeMessage()
{
    printf("\n\n\n\n\n");
    printf("\n\t\t\t  **-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**\n");
    printf("\n\t\t\t        =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
    printf("\n\t\t\t        =                 WELCOME                   =");
    printf("\n\t\t\t        =                   TO                      =");
    printf("\n\t\t\t        =                HOSPITAL                   =");
    printf("\n\t\t\t        =               MANAGEMENT                  =");
    printf("\n\t\t\t        =                 SYSTEM                    =");
    printf("\n\t\t\t        =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
    printf("\n\t\t\t  **-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**-**\n");
    printf("\n\n\n\t\t\t ");
    system("read -p 'Press Enter to continue...' var");
}

int main()
{
    int inp;
    welcomeMessage();
    system("clear");
    printf("\nPlease select one of the following:");
    printf("\n1. Add Patient Information");
    printf("\n2. Display Patient Information");
    printf("\n3. General ward rooms Availability");
    printf("\n4. special ward rooms Availability");
    printf("\n5. Admitted Patients Record\n");
    printf("Input choice: ");
    scanf("%d", &inp);
    fgetc(stdin);
    switch (inp)
    {
    case 1:
        add_patient();
        break;
    case 2:
        readPatient();
        break;
    case 3:
        general_rooms(0);
        break;
    case 4:
        special_rooms(0);
        break;
    case 5:
        updateRecord();
        break;
    default:
        printf("Invalid choice");
        break;
    }
    return 0;
}
